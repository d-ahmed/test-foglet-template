{"version":3,"sources":["shared/components/navigation/Navigation.js","core/components/foglet-template/FogletTemplate.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","evt","this","props","onNavigation","react_default","a","createElement","className","Button_default","onClick","onMove","bind","Icon_default","Component","UpdateSigma","render","sigma","_ref","nodes","edges","graph","clear","forEach","n","addNode","refresh","e","addEdge","FogletTemplate","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fogletTemplate","template","foglet","overlays","setDescriptor","id","inViewID","x","Math","floor","random","y","state","myNode","assign","label","concat","getDescriptor","size","color","_this3","connection","then","spawnTarget","coordinates","perimeter","setInterval","_this4","Array","from","_networkManager","_overlays","keys","overlay","peersN","_network","_rps","partialView","values","map","peer","desc","descriptor","_ref2","z","fgid","push","peerId","source","target","setState","targetId","options","arguments","length","undefined","console","log","spawned","_spawned$getCoordinat","getCoordinates","targetSpawned","navigation","updateNode","node","toConsumableArray","edge","updated","find","es","settings","drawEdges","clone","default","FogletTemplate_UpdateSigma","renderGraph","components_navigation_Navigation","App","components_foglet_template_FogletTemplate","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ydA+BeA,iLAxBJC,GACHC,KAAKC,MAAMC,aAAaH,oCAIxB,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQE,UAAU,0BAA0BE,QAASR,KAAKS,OAAOC,KAAKV,KAAM,SACxEG,EAAAC,EAAAC,cAACM,EAAAP,EAAD,6BAEJD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQE,UAAU,wBAAwBE,QAASR,KAAKS,OAAOC,KAAKV,KAAM,OACtEG,EAAAC,EAAAC,cAACM,EAAAP,EAAD,2BAEJD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQE,UAAU,2BAA2BE,QAASR,KAAKS,OAAOC,KAAKV,KAAM,UACzEG,EAAAC,EAAAC,cAACM,EAAAP,EAAD,8BAEJD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQE,UAAU,0BAA0BE,QAASR,KAAKS,OAAOC,KAAKV,KAAM,SACxEG,EAAAC,EAAAC,cAACM,EAAAP,EAAD,qCAnBKQ,6BCEnBC,6MAkBFC,OAAS,kBAAM,kGAjBoC,IAAvBC,EAAuBC,EAAvBD,MAAOE,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,MAExCH,EAAMI,MAAMC,QAEZH,EAAMI,QAAQ,SAAAC,GACZP,EAAMI,MAAMI,QAAQD,KAGtBP,EAAMS,UAENN,EAAMG,QAAQ,SAAAI,GACZV,EAAMI,MAAMO,QAAQD,KAGtBV,EAAMS,iBAfcZ,aAsNXe,cA/LX,SAAAA,EAAY1B,GAAM,IAAA2B,EAAAC,OAAAC,EAAA,EAAAD,CAAA7B,KAAA2B,GACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjC,KAAMC,IAEN,IAAIiC,EAAiB,IAAIC,WAAU,CAAEC,OAAQ,CAAEC,SAAU,MAAQ,GAHnD,OAKdH,EAAeI,cAAc,CACzBC,GAAIL,EAAeE,OAAOI,SAC1BC,EAAGC,KAAKC,MAAsB,GAAhBD,KAAKE,UACnBC,EAAGH,KAAKC,MAAsB,GAAhBD,KAAKE,YAEvBhB,EAAKkB,MAAQ,CACTX,SAAUD,EACVa,OAAOlB,OAAOmB,OAAO,CACjBT,GAAIL,EAAeE,OAAOI,SAC1BS,MAAK,aAAAC,OAAchB,EAAeiB,gBAAgBV,EAA7C,KAAAS,OAAkDhB,EAAeiB,gBAAgBN,EAAjF,KACLJ,EAAE,EACFI,EAAE,EACFO,KAAM,EACNC,MAAO,QACRnB,EAAeiB,iBAClBhC,MAAO,CACHF,MAAM,GACNC,MAAM,KAtBAU,oFA6BE,IAAA0B,EAAAtD,KAChBA,KAAKuB,QAAQ,KAAMvB,KAAK8C,MAAMC,QAE9B/C,KAAK8C,MAAMX,SAASoB,WAAW,KAAM,MAAMC,KAAK,cAIhDxD,KAAKyD,YAAY,IAAK,CAClBC,YAAa,CAAEjB,EAAG,EAAGI,EAAG,GACxBc,UAAW,IAGfC,YAAY,WACRN,EAAK9B,WACN,uCAIE,IAAAqC,EAAA7D,KACL8D,MAAMC,KAAK/D,KAAK8C,MAAMX,SAASC,OAAO4B,gBAAgBC,UAAUC,OAAQ,SAAAC,GACpE,IAAIC,EAASN,MAAMC,KAAKF,EAAKf,MAAMX,SAASC,OAAO+B,QAAQA,GAASE,SAASC,KAAKC,YAAYC,UAC1FvD,EAAQmD,EAAOK,IAAI,SAAAC,GAAO,MAAO,CAACA,KAAKA,EAAKA,KAAMC,KAAKD,EAAKE,cAAcH,IAAI,SAAAI,GAAgB,IAAdH,EAAcG,EAAdH,KAAMC,EAAQE,EAARF,KAEtF,cADOA,EAAKG,EACLjD,OAAOmB,OAAO,CACjBT,GAAGmC,EACHzB,MAAK,GAAAC,OAAIyB,EAAKpC,GAAT,QAAAW,OAAkByB,EAAKlC,EAAvB,KAAAS,OAA4ByB,EAAK9B,EAAjC,KACLO,KAAM,EACNC,MAAO,QAASsB,KAEpBI,EAAOlB,EAAKf,MAAMX,SAASC,OAAOI,SAEtCvB,EAAM+D,KACFnD,OAAOmB,OAAO,CACVT,GAAIwC,EACJ9B,MAAK,aAAAC,OAAcW,EAAKf,MAAMX,SAASgB,gBAAgBV,EAAlD,KAAAS,OAAuDW,EAAKf,MAAMX,SAASgB,gBAAgBN,EAA3F,KACLO,KAAM,EACNC,MAAO,QAASQ,EAAKf,MAAMX,SAASgB,kBAE5C,IAAIjC,EAAQkD,EAAOK,IAAI,SAAAC,GAAI,OAAEA,EAAKA,OAAMD,IAAI,SAAAQ,GACxC,MAAO,CAAC1C,GAAE,GAAAW,OAAI6B,EAAJ,KAAA7B,OAAY+B,GAAUC,OAAOH,EAAMI,OAAOF,KAGpD9D,EAAQ0C,EAAKf,MAAM3B,MACvBA,EAAMF,MAAQA,EACdE,EAAMD,MAAQA,EACd2C,EAAKuB,SAAS,CACVjE,MAAMA,0CAMNkE,GAAuB,IAAbC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,GAC5B,IAAKF,EAAU,OAAOK,QAAQC,IAAI,wBAClC,IAAMC,EAAU,IAAIT,SAAOE,EAAUC,GAFNO,EAGdD,EAAQE,iBAAjBrD,EAHuBoD,EAGvBpD,EAAGI,EAHoBgD,EAGpBhD,EACX7C,KAAKuB,QAAQ,KAAM,CACfgB,GAAIqD,EAAQrD,GACZU,MAAK,KAAAC,OAAOmC,EAAP,KAAAnC,OAAmBT,EAAnB,MAAAS,OAAyBL,EAAzB,KACLJ,IACAI,IACAO,KAAM,EACNC,MAAO,SAETrD,KAAK8C,MAAMX,SAAS4D,cAAcH,wCAK3BI,GACT,OAAOA,GACH,IAAK,KACDN,QAAQC,IAAI,cACZ3F,KAAKiG,WAAW,CACZ1D,GAAG,KACHE,EAAE,EACFI,EAAE,KAEN,MACJ,IAAK,OACD6C,QAAQC,IAAI,cACZ,MACJ,IAAK,QACDD,QAAQC,IAAI,cACZ,MACJ,IAAK,OACDD,QAAQC,IAAI,cACZ,MACJ,QACID,QAAQC,IAAI,wBAA0BK,EAAa,sCAKvDjG,GAON,IAPWmG,EAOXX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAPkB,CAChBhD,GAAG,IAAkB,IAAdG,KAAKE,SACZK,MAAM,QAAQP,KAAKC,MAAoB,GAAdD,KAAKE,UAC9BH,EAAEC,KAAKC,MAAoB,GAAdD,KAAKE,UAClBC,EAAEH,KAAKC,MAAoB,GAAdD,KAAKE,UAClBQ,KAAM,EACNC,MAAO,QAEHlC,EAAQnB,KAAK8C,MAAM3B,MACvBA,EAAMF,MAANY,OAAAsE,EAAA,EAAAtE,CAAkBV,EAAMF,OAAxBiC,OAAA,CAA+BgD,IAE/BlG,KAAKoF,SAAS,CACVjE,MAAMA,oCAIN+D,EAAQC,GACZ,IAAIiB,EAAO,CACP7D,GAAG,IAAkB,IAAdG,KAAKE,SAAasC,OAAOA,EAAOC,OAAOA,EAAOlC,MAAK,GAAAC,OAAIgC,EAAJ,KAAAhC,OAAciC,IAExEhE,EAAQnB,KAAK8C,MAAM3B,MACvBA,EAAMD,MAANW,OAAAsE,EAAA,EAAAtE,CAAkBV,EAAMD,OAAxBgC,OAAA,CAA+BkD,IAC/BpG,KAAKoF,SAAS,CACVjE,MAAOA,uCAIJ+E,GAEP,GAAIA,GAASA,EAAK3D,GAAlB,CAIA,IAAIpB,EAAQnB,KAAK8C,MAAM3B,MACnBkF,EAAUlF,EAAMF,MAAMqF,KAAK,SAAA7E,GAAC,OAAIA,EAAEc,IAAM2D,EAAK3D,KAC9C8D,IACCA,EAAUxE,OAAOmB,OAAOqD,EAASH,GACjClG,KAAKoF,SAAS,CACVjE,MAAMA,UARVuE,QAAQC,IAAI,qDAgBhB,OACIxF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAOpF,MAAOnB,KAAK8C,MAAM3B,MAAOqF,SAAU,CAACC,WAAW,EAAMC,OAAO,IAC/DvG,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAYI,QAAQ,WACpBxG,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CAAYI,QAAQ,YACpBxG,EAAAC,EAAAC,cAACuG,EAAD,CAAa3F,MAAOjB,KAAK8C,MAAM3B,MAAMF,MAAOC,MAAOlB,KAAK8C,MAAM3B,MAAMD,2CAOhF,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,+BACCL,KAAK6G,cACN1G,EAAAC,EAAAC,cAACyG,EAAD,CAAYxG,UAAU,aAAaJ,aAAcF,KAAKE,aAAaQ,KAAKV,gBA3L3DY,aCbdmG,mLARX,OACE5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2G,EAAD,cALUpG,aCQEqG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASxG,OAAOX,EAAAC,EAAAC,cAACkH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.0c7d8a40.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Navigation.css';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\n\nclass Navigation extends Component{\n\n    onMove(evt){\n        this.props.onNavigation(evt);\n    }\n\n    render(){\n        return (\n            <div className=\"Navigation\">\n                <Button className=\"Btn keyboard_arrow_left\" onClick={this.onMove.bind(this, 'left')}>\n                    <Icon>keyboard_arrow_left</Icon>\n                </Button>\n                <Button className=\"Btn keyboard_arrow_up\" onClick={this.onMove.bind(this, 'up')}>\n                    <Icon>keyboard_arrow_up</Icon>\n                </Button>\n                <Button className=\"Btn keyboard_arrow_right\" onClick={this.onMove.bind(this, 'right')}>\n                    <Icon>keyboard_arrow_right</Icon>\n                </Button>\n                <Button className=\"Btn keyboard_arrow_down\" onClick={this.onMove.bind(this, 'down')}>\n                    <Icon>keyboard_arrow_down</Icon>\n                </Button>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport './FogletTemplate.css';\nimport Navigation from '../../../shared/components/navigation/Navigation';\nimport {Sigma, EdgeShapes, NodeShapes} from 'react-sigma';\nimport {template, target, Leader} from 'foglet-template';\n\n\nclass UpdateSigma extends Component {\n    componentWillReceiveProps({ sigma, nodes, edges }) {\n        \n      sigma.graph.clear()\n      \n      nodes.forEach(n => {\n        sigma.graph.addNode(n)\n      })\n\n      sigma.refresh()\n\n      edges.forEach(e => {\n        sigma.graph.addEdge(e)\n      })\n\n      sigma.refresh()\n    }\n  \n    render = () => null\n  }\n\nclass FogletTemplate extends Component{\n\n    constructor(props){\n        super(props);\n\n        let fogletTemplate = new template( { foglet: { overlays: [] } }, false );\n\n        fogletTemplate.setDescriptor({\n            id: fogletTemplate.foglet.inViewID,\n            x: Math.floor(Math.random() * 10),\n            y: Math.floor(Math.random() * 10)\n        } );\n        this.state = {\n            template: fogletTemplate,\n            myNode:Object.assign({\n                id: fogletTemplate.foglet.inViewID,\n                label:`Daniel - (${fogletTemplate.getDescriptor().x},${fogletTemplate.getDescriptor().y})`,\n                x:3,\n                y:6,\n                size: 4,\n                color: '#000'\n            }, fogletTemplate.getDescriptor()),\n            graph: {\n                nodes:[],\n                edges:[]\n            }\n        }\n        \n    }\n\n\n    componentWillMount(){\n        this.addNode(null, this.state.myNode)\n\n        this.state.template.connection(null, null).then(()=>{\n            \n        });\n\n        this.spawnTarget(\"1\", {\n            coordinates: { x: 5, y: 5 },\n            perimeter: 4\n        });\n\n        setInterval(()=>{\n            this.refresh()\n        }, 2*1000)\n    }\n\n\n    refresh(){\n        Array.from(this.state.template.foglet._networkManager._overlays.keys(), overlay=>{\n            let peersN = Array.from(this.state.template.foglet.overlay(overlay)._network._rps.partialView.values());\n            let nodes = peersN.map(peer=>{return {peer:peer.peer, desc:peer.descriptor}}).map(({peer, desc})=>{\n                delete desc.z;\n                return Object.assign({\n                    id:peer,\n                    label:`${desc.id} - (${desc.x},${desc.y})`,\n                    size: 4,\n                    color: '#000'}, desc)\n            })\n            let fgid = this.state.template.foglet.inViewID;\n            \n            nodes.push(\n                Object.assign({\n                    id: fgid,\n                    label:`Daniel - (${this.state.template.getDescriptor().x},${this.state.template.getDescriptor().y})`,\n                    size: 4,\n                    color: '#000'}, this.state.template.getDescriptor())\n            )\n            let edges = peersN.map(peer=>peer.peer).map(peerId=>{\n                return {id:`${fgid}-${peerId}`, source:fgid, target:peerId}\n            })\n            \n            let graph = this.state.graph\n            graph.nodes = nodes\n            graph.edges = edges\n            this.setState({\n                graph:graph\n            })\n            // console.log(nodes)\n        })\n    }\n\n    spawnTarget(targetId, options = {}){\n        if (!targetId) return console.log(\"please specify an id\");\n        const spawned = new target(targetId, options);\n        const { x, y } = spawned.getCoordinates();\n        this.addNode(null, {\n            id: spawned.id,\n            label: `p-${targetId}(${x}, ${y})`,\n            x,\n            y,\n            size: 4,\n            color: '#RFD'\n          })\n          this.state.template.targetSpawned(spawned);\n          //const fgid = this.state.template.foglet.inViewID;\n          // const edgeId = id => `${spawned.id}.${fgid}-${id}`;\n        }\n\n    onNavigation(navigation){\n        switch(navigation){\n            case 'up': \n                console.log('decrease y')\n                this.updateNode({\n                    id:\"n1\",\n                    x:5,\n                    y:40,\n                })\n                break;\n            case 'left':\n                console.log('decrease x')\n                break;\n            case 'right':\n                console.log('increase x')\n                break;\n            case 'down': \n                console.log('increase y')\n                break;\n            default:\n                console.log('Sorry, we are out of ' + navigation + '.');\n        }\n        \n    }\n\n    addNode(evt, node = {\n        id:\"n\"+Math.random()*100,\n        label:\"da - \"+Math.floor(Math.random()*10),\n        x:Math.floor(Math.random()*10),\n        y:Math.floor(Math.random()*10),\n        size: 4,\n        color: '#000'\n    }){\n        let graph = this.state.graph;\n        graph.nodes = [...graph.nodes, node];\n        \n        this.setState({\n            graph:graph\n        });\n    }\n\n    addEdge(source, target){\n        let edge = {\n            id:\"e\"+Math.random()*100,source:source,target:target,label:`${source}-${target}`\n        }\n        let graph = this.state.graph;\n        graph.edges = [...graph.edges, edge];\n        this.setState({\n            graph: graph\n        });\n    }\n\n    updateNode(node){\n       \n        if(!node && !node.id) {\n            console.log('id required')\n            return;\n        }\n        let graph = this.state.graph;\n        var updated = graph.nodes.find(e => e.id == node.id)\n        if(updated){\n            updated = Object.assign(updated, node)\n            this.setState({\n                graph:graph\n            })\n        } \n    }\n\n\n    renderGraph(){\n        // console.log(this.state.graph);\n        return (\n            <div>\n                <Sigma graph={this.state.graph} settings={{drawEdges: true, clone: false}}>\n                    <EdgeShapes default=\"dotted\"/>\n                    <NodeShapes default=\"diamond\"/>\n                    <UpdateSigma nodes={this.state.graph.nodes} edges={this.state.graph.edges}/>\n                </Sigma>\n            </div>\n        )\n    }\n\n    render(){\n        return (\n            <div className=\"FogletTemplate\">\n                <p>My foglet template</p>\n                {this.renderGraph()}\n                <Navigation className=\"Navigation\" onNavigation={this.onNavigation.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nexport default FogletTemplate;","import React, { Component } from 'react';\nimport './App.css';\nimport FogletTemplate from './core/components/foglet-template/FogletTemplate';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <FogletTemplate/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}